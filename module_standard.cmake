IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
   IF($ENV{CXXFLAGS} MATCHES "-m64")
	message(STATUS "x86_x64")
	set(PLATFORM x64)
   ELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64)$")
	message(STATUS "aarch64")
	set(PLATFORM x64)
   ELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES "mips64")
	message(STATUS "mips64")
	set(PLATFORM x64)
   ELSE(CMAKE_SYSTEM_PROCESSOR)
	message(STATUS "x32")
	set(PLATFORM x32)
   ENDIF()
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Windows")
	IF(CMAKE_CL_64)
	  set(PLATFORM x64)
	ELSE(CMAKE_CL_64)
	  set(PLATFORM x32)
	ENDIF()
ENDIF()

IF(DEFINED ENV{USE_QT4})
	set(QT_BINARY_DIR $ENV{QT4_DIR}/bin)
ENDIF()

message(STATUS "build platform:${PLATFORM}")

IF(CMAKE_BUILD_TYPE MATCHES "DEBUG")
  message(STATUS "build with Debug...")
  set(BUILD_CONFIG Debug)
ELSEIF(CMAKE_BUILD_TYPE MATCHES "RELEASE")
  message(STATUS "build with Release...")
  set(BUILD_CONFIG Release)
ENDIF()

set(CRT_VERSION_NAME)

IF(DEFINED ENV{DEP_SRC_DIR})
	set(ROOT_DIR $ENV{DEP_SRC_DIR})
	message(STATUS "ROOT_DIR:${ROOT_DIR}")
ELSEIF(NOT DEFINED ENV{DEP_SRC_DIR})
	set(ROOT_DIR ${CMAKE_SOURCE_DIR}/../)
	message(STATUS "ROOT_DIR:${ROOT_DIR}")
ENDIF()

message(STATUS "CRT CMAKE_GENERATOR Name: ${CMAKE_GENERATOR}")

IF(CMAKE_GENERATOR MATCHES "Visual Studio 10 2010")
  set(CRT_VERSION_NAME "vc100")
ELSEIF(CMAKE_GENERATOR MATCHES "Visual Studio 11 2012")
  set(CRT_VERSION_NAME "vc110")
ELSEIF(CMAKE_GENERATOR MATCHES "Visual Studio 12 2013")
  set(CRT_VERSION_NAME "vc120")
ELSEIF(CMAKE_GENERATOR MATCHES "Visual Studio 14 2015")
  set(CRT_VERSION_NAME "vc140")
ELSEIF(CMAKE_GENERATOR MATCHES "Visual Studio 15 2017")
  set(CRT_VERSION_NAME "vc140")
ELSEIF(CMAKE_GENERATOR MATCHES "Visual Studio 16 2019")
  set(CRT_VERSION_NAME "vc140")
ELSE(CMAKE_GENERATOR MATCHES "Visual Studio 16 2019")
  set(CRT_VERSION_NAME "GNU")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wl,--rpath=./ -Wl,--rpath=./thirdparty -Wl,--rpath=./Models -Wl,--rpath=./thirdparty/lib -Wl,--rpath=../thirdparty/lib -Wl,--rpath=../")
ENDIF()

message(STATUS "CRT Version Name: ${CRT_VERSION_NAME}")

IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
  IF(BUILD_CONFIG MATCHES Debug)
    set(GENERATE_LIB_SUFFIX -${PLATFORM}_d)
  ELSEIF(BUILD_CONFIG MATCHES Release)
    set(GENERATE_LIB_SUFFIX -${PLATFORM})
  ENDIF()
ENDIF()

IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
  set(CMAKE_DEBUG_POSTFIX "-${CRT_VERSION_NAME}-${PLATFORM}_d")
  set(CMAKE_RELEASE_POSTFIX "-${CRT_VERSION_NAME}-${PLATFORM}")
  IF(BUILD_CONFIG MATCHES Debug)
    set(GENERATE_LIB_SUFFIX -${CRT_VERSION_NAME}-${PLATFORM}_d)
  ELSEIF(BUILD_CONFIG MATCHES Release)
    set(GENERATE_LIB_SUFFIX -${CRT_VERSION_NAME}-${PLATFORM})
  ENDIF()
ENDIF()

message(STATUS "binaries output path:${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
message(STATUS "libraries output path:${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")

set(HEADER_FILES)
set(SOURCE_FILES)
set(QRC_SOURCE_FILES)
set(UI_FILES)

IF(CMAKE_GENERATOR MATCHES "Visual Studio")
	add_compile_options(/MP)
ELSEIF(CRT_VERSION_NAME MATCHES "GNU")
  add_compile_options(-std=c++11)
  IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
	IF(CMAKE_SYSTEM_PROCESSOR MATCHES "mips64")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -rdynamic -static-libgcc -mxgot")
	ELSE()
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -rdynamic -static-libgcc -static-libstdc++")
	ENDIF()
  ENDIF()
ENDIF()

message(STATUS "DEP_SRC_DIR:$ENV{DEP_SRC_DIR}")
message(STATUS "ThirdPart:$ENV{ThirdPart}")

set(CMAKE_PREFIX_PATH $ENV{QT5_DIR})

#配置自己开发的源文件和库 ElSE_LIBRARY_LIST
macro (configure_ElSE_LIST project_name)
	foreach(library_arg ${ElSE_LIBRARY_LIST})
		message(STATUS "configure ${project_name} include ${library_arg}")
		include_directories(${ROOT_DIR}/library_arg)
		link_directories(${ROOT_DIR}/Binaries/lib/${CRT_VERSION_NAME}/${PLATFORM}/${library_arg})
    endforeach()
endmacro()

#配置自己开发的源文件和库 ElSE_LIBRARY_LIST
macro (configure_ElSE_LIBRARY_LIST project_name)
	foreach(library_arg ${ElSE_LIBRARY_LIST})
		message(STATUS "configure ${project_name} lib ${library_arg}")
		target_link_libraries(${project_name} ${library_arg}${GENERATE_LIB_SUFFIX})
	endforeach()
endmacro()

#配置源文件 三方库
macro (configure_project project_name)

	configure_ElSE_LIST(${project_name})

	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${ROOT_DIR}/Binaries/bin/${CRT_VERSION_NAME}/${PLATFORM}/${project_name}")
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${ROOT_DIR}/Binaries/lib/${CRT_VERSION_NAME}/${PLATFORM}/${project_name}")
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${ROOT_DIR}/Binaries/bin/${CRT_VERSION_NAME}/${PLATFORM}/${project_name}")
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${ROOT_DIR}/Binaries/bin/${CRT_VERSION_NAME}/${PLATFORM}/${project_name}")
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${ROOT_DIR}/Binaries/lib/${CRT_VERSION_NAME}/${PLATFORM}/${project_name}")
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${ROOT_DIR}/Binaries/bin/${CRT_VERSION_NAME}/${PLATFORM}/${project_name}")
	set(THIRD_LIBRARY_LIST ${THIRD_LIBRARY_LIST})

	message(STATUS "configure ${project_name}")
	
	set(HEADER_FILES "")
	set(SOURCE_FILES "")
	set(QRC_SOURCE_FILES "")
	set(UI_FILES "")

	set(TEMP_HEADER_FILES "")
	set(TEMP_SOURCE_FILES "")
	set(TEMP_QRC_SOURCE_FILES "")
	set(TEMP_UI_FILES "")
	
	message(STATUS "proj_files_path_list:${FILES_PATH_LIST}")
	
	file(GLOB_RECURSE HEADER_FILES "*.h" "*.hpp" "*.inc")
    file(GLOB_RECURSE SOURCE_FILES "*.c" "*.cpp" "*.cxx" "*.rc")
    file(GLOB_RECURSE QRC_SOURCE_FILES "$*.qrc")
    file(GLOB_RECURSE UI_FILES "*.ui")

	foreach(file_path ${FILES_PATH_LIST})
		file(GLOB_RECURSE TEMP_HEADER_FILES "${file_path}/*.h" "${file_path}/*.hpp" "${file_path}/*.inc")
		file(GLOB_RECURSE TEMP_SOURCE_FILES "${file_path}/*.c" "${file_path}/*.cpp" "${file_path}/*.cxx")
		file(GLOB_RECURSE TEMP_QRC_SOURCE_FILES "${file_path}/*.qrc")
		file(GLOB_RECURSE TEMP_UI_FILES "${file_path}/*.ui")
		IF("${HEADER_FILES}" STREQUAL "")
		set(HEADER_FILES "${TEMP_HEADER_FILES}")
		ELSE()
		set(HEADER_FILES "${HEADER_FILES};${TEMP_HEADER_FILES}")
		ENDIF()

		IF("${SOURCE_FILES}" STREQUAL "")
		set(SOURCE_FILES "${TEMP_SOURCE_FILES}")
		ELSE()
		set(SOURCE_FILES "${SOURCE_FILES};${TEMP_SOURCE_FILES}")
		ENDIF()

		IF("${QRC_SOURCE_FILES}" STREQUAL "")
		set(QRC_SOURCE_FILES "${TEMP_QRC_SOURCE_FILES}")
		ELSE()
		set(QRC_SOURCE_FILES "${QRC_SOURCE_FILES};${TEMP_QRC_SOURCE_FILES}")
		ENDIF()

		IF("${UI_FILES}" STREQUAL "")
			set(UI_FILES "${TEMP_UI_FILES}")
		ELSE()
			set(UI_FILES "${UI_FILES};${TEMP_UI_FILES}")
		ENDIF()
	endforeach()

	IF(REMOVE_FILES_LIST)
		list(REMOVE_ITEM SOURCE_FILES ${REMOVE_FILES_LIST})
	ENDIF()
	
	source_group("Header Files" FILES ${HEADER_FILES})
	source_group("Ui Files" FILES ${UI_FILES})
	source_group("Source Files" FILES ${SOURCE_FILES})

	include_directories(../)
	include_directories(./)

	foreach(file_path ${FILES_PATH_LIST})
		include_directories(${file_path})
		include_directories(${file_path}${project_name})
		include_directories(${CMAKE_SOURCE_DIR})
	endforeach()

	IF(THIRD_LIBRARY_LIST)
		foreach(lib_name ${THIRD_LIBRARY_LIST})
			IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
				include_directories($ENV{ThirdPart}/${lib_name}/include)
				include_directories($ENV{ThirdPart}/${lib_name}/usr/local/include)
				link_directories($ENV{ThirdPart}/${lib_name}/usr/local/lib)
				link_directories($ENV{ThirdPart}/${lib_name}/lib)
			ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Windows")
				IF(lib_name MATCHES boost)
					IF(CRT_VERSION_NAME MATCHES "vc100")
						include_directories($ENV{ThirdPart}/${lib_name}_1.56/include)
						link_directories($ENV{ThirdPart}/${lib_name}_1.56/lib/${CRT_VERSION_NAME}/${PLATFORM})
						link_directories($ENV{ThirdPart}/${lib_name}_1.56/lib)
				     ELSE(CRT_VERSION_NAME MATCHES "vc100")
						include_directories($ENV{ThirdPart}/${lib_name}/include)
						link_directories($ENV{ThirdPart}/${lib_name}/lib/${CRT_VERSION_NAME}/${PLATFORM})
						link_directories($ENV{ThirdPart}/${lib_name}/lib)
				     ENDIF()
				ELSEIF(lib_name MATCHES qwt)
					IF(CRT_VERSION_NAME MATCHES "vc100")
						include_directories($ENV{ThirdPart}/${lib_name}-6.0.1/include)
						link_directories($ENV{ThirdPart}/${lib_name}-6.0.1/lib/${CRT_VERSION_NAME}/${PLATFORM})
						link_directories($ENV{ThirdPart}/${lib_name}-6.0.1/lib)
				    ELSE(CRT_VERSION_NAME MATCHES "vc100")
						include_directories($ENV{ThirdPart}/${lib_name}/include)
						link_directories($ENV{ThirdPart}/${lib_name}/lib/${CRT_VERSION_NAME}/${PLATFORM})
						link_directories($ENV{ThirdPart}/${lib_name}/lib)
				    ENDIF()
				ELSE(lib_name MATCHES qwt)
				     include_directories($ENV{ThirdPart}/${lib_name}/include)
				     link_directories($ENV{ThirdPart}/${lib_name}/lib/${CRT_VERSION_NAME}/${PLATFORM})
				     link_directories($ENV{ThirdPart}/${lib_name}/lib)
				ENDIF()
			ENDIF()
		endforeach()
	ENDIF()

	IF(BUILD_CONFIG MATCHES Debug)
		link_directories(${CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG})
	ELSEIF(BUILD_CONFIG MATCHES Release)
		link_directories(${CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE})
	ENDIF()

	string(TOUPPER ${project_name}_EXPORTS PROJECT_EXPORTS_DEFINIE)
	string(TOUPPER ${project_name}_LIB PROJECT_LIB_DEFINIE)
	
	add_definitions("-D${PROJECT_EXPORTS_DEFINIE}" "-D${PROJECT_LIB_DEFINIE}")
	
	IF(DEFINED ENV{WITHOUT_LICENSE})
		add_definitions(-DWITHOUT_LICENSE)
		message(STATUS "WITHOUT_LICENSE")
	ENDIF()
endmacro()

#配置源文件目录--当前目多级目录
macro (configure_framework_project project_name)
	set(FILES_PATH_LIST "${FILES_PATH_PREFIX}public/include/" "${FILES_PATH_PREFIX}private/src/")
		configure_project(${project_name})
	unset(FILES_PATH_LIST)
endmacro()

#配置源文件目录--当前目录
macro (configure_generate_project project_name)
	set(FILES_PATH_LIST "./")
		configure_project(${project_name})
	unset(FILES_PATH_LIST)
endmacro()

macro(use_pch project_name pch_header pch_source_path)
	IF(CMAKE_GENERATOR MATCHES "Visual Studio")
		set_target_properties(${project_name} PROPERTIES COMPILE_FLAGS "/Yu${pch_header}" "/FI${pch_header}" "/Fp${EXECUTABLE_OUTPUT_PATH}/pch/${project_name}/${pch_header}.pch")
		set_source_files_properties("${pch_source_path}" PROPERTIES COMPILE_FLAGS "/Yc${pch_header}")
		set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES "${EXECUTABLE_OUTPUT_PATH}/pch/${project_name}/${pch_header}.pch")
	ENDIF()
endmacro()

macro(add_ui_group)
	link_directories(BasicUIFramework)
endmacro()

macro(add_ui_group)
	include_directories(${ROOT_DIR}/BasicUIFramework)
endmacro()

#=========================================外部直接调用函数
#生成动态库  带多级目录源文件 
macro(generate_framework_project project_name)
	message(STATUS "generating framework project:${project_name}")

	configure_framework_project(${project_name})

	add_library(${project_name} SHARED ${SOURCE_FILES} ${HEADER_FILES})

	configure_ElSE_LIBRARY_LIST(${project_name})

	IF(DEFINED PCH_SOURCE_PATH_PREFIX)
		use_pch(${project_name} "stdafx.h" "${PCH_SOURCE_PATH_PREFIX}private/src/stdafx.cpp")
	ELSEIF(DEFINED PCH_SOURCE_PATH_PREFIX)
		use_pch(${project_name} "stdafx.h" "private/src/stdafx.cpp")
	ENDIF()

	foreach(library_arg ${THIRD_LIBRARY_LIST})
        IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
            foreach(library_arg ${THIRD_LIBRARY_LIST})
			    IF(library_arg MATCHES Qtnribbon)
                    IF(BUILD_CONFIG MATCHES Debug)
                        target_link_libraries(${project_name} qtnribbond3)
                    ELSEIF(BUILD_CONFIG MATCHES Release)
                        target_link_libraries(${project_name} qtnribbon3)
                    ENDIF()
                ENDIF()
                IF(library_arg MATCHES qwt)
                    IF(BUILD_CONFIG MATCHES Debug)
                        target_link_libraries(${project_name} qwtd)
                    ELSEIF(BUILD_CONFIG MATCHES Release)
                        target_link_libraries(${project_name} qwt)
                    ENDIF()
                ENDIF()
				IF(library_arg MATCHES pugixml)       
                    IF(BUILD_CONFIG MATCHES Debug)
                        target_link_libraries(${project_name} pugixmld)
                    ELSEIF(BUILD_CONFIG MATCHES Release)
                        target_link_libraries(${project_name} pugixml)
                    ENDIF()
                ENDIF()
                IF(library_arg MATCHES gtest)
                    IF(CRT_VERSION_NAME MATCHES "vc140")
                        IF(BUILD_CONFIG MATCHES Debug)
                            target_link_libraries(${project_name} gtestd)
                        ELSEIF(BUILD_CONFIG MATCHES Release)
                            target_link_libraries(${project_name} gtest)
                        ENDIF()
                    ENDIF()
                ENDIF()
                IF(library_arg MATCHES lua53)
                    IF(CRT_VERSION_NAME MATCHES "vc140")
                        target_link_libraries(${project_name} lua53)
                    ENDIF()
                ENDIF()
            endforeach()
        ENDIF()
    endforeach()
	IF(CMAKE_BUILD_TYPE MATCHES "DEBUG")
		IF(CRT_VERSION_NAME MATCHES "vc140")
			set_target_properties(${project_name} PROPERTIES LINK_FLAGS_DEBUG "/DEBUG:FULL")
		ENDIF()
	ENDIF()

	IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
		target_link_libraries(${project_name} rt)
	ENDIF()
endmacro()

#=========================================外部直接调用函数
#生成可执行文件 带多级目录源文件
macro(generate_framework_project_exe project_name)
	message(STATUS "generating framework project:${project_name}")

	configure_framework_project(${project_name})

	add_executable(${project_name} ${SOURCE_FILES} ${HEADER_FILES})

	configure_ElSE_LIBRARY_LIST(${project_name})

	IF(DEFINED PCH_SOURCE_PATH_PREFIX)
		use_pch(${project_name} "stdafx.h" "${PCH_SOURCE_PATH_PREFIX}private/src/stdafx.cpp")
	ELSEIF(DEFINED PCH_SOURCE_PATH_PREFIX)
		use_pch(${project_name} "stdafx.h" "private/src/stdafx.cpp")
	ENDIF()

	IF(CMAKE_BUILD_TYPE MATCHES "DEBUG")
		IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
			set_target_properties(${project_name} PROPERTIES DEBUG_POSTFIX "d")
		ENDIF()
	ENDIF()

	IF(CMAKE_BUILD_TYPE MATCHES "DEBUG")
		IF(CRT_VERSION_NAME MATCHES "vc140")
			set_target_properties(${project_name} PROPERTIES LINK_FLAGS_DEBUG "/DEBUG:FULL")
		ENDIF()
	ENDIF()

	foreach(library_arg ${THIRD_LIBRARY_LIST})
        IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
            foreach(library_arg ${THIRD_LIBRARY_LIST})
                IF(library_arg MATCHES Qtnribbon)
                    IF(BUILD_CONFIG MATCHES Debug)
                        target_link_libraries(${project_name} qtnribbond3)
                    ELSEIF(BUILD_CONFIG MATCHES Release)
                        target_link_libraries(${project_name} qtnribbon3)
                    ENDIF()
                ENDIF()
                IF(library_arg MATCHES qwt)
                    IF(BUILD_CONFIG MATCHES Debug)
                        target_link_libraries(${project_name} qwtd)
                    ELSEIF(BUILD_CONFIG MATCHES Release)
                        target_link_libraries(${project_name} qwt)
                    ENDIF()
                ENDIF()
				IF(library_arg MATCHES pugixml)
                    IF(BUILD_CONFIG MATCHES Debug)
                        target_link_libraries(${project_name} pugixmld)
                    ELSEIF(BUILD_CONFIG MATCHES Release)
                        target_link_libraries(${project_name} pugixml)
                    ENDIF()
                ENDIF()
                IF(library_arg MATCHES gtest)
                    IF(CRT_VERSION_NAME MATCHES "vc140")
                        IF(BUILD_CONFIG MATCHES Debug)
                            target_link_libraries(${project_name} gtestd)
                        ELSEIF(BUILD_CONFIG MATCHES Release)
                            target_link_libraries(${project_name} gtest)
                        ENDIF()
                    ENDIF()
                ENDIF()
                IF(library_arg MATCHES lua53)
                    IF(CRT_VERSION_NAME MATCHES "vc140")
                        target_link_libraries(${project_name} lua53)
                    ENDIF()
                ENDIF()
            endforeach()
        ENDIF()
    endforeach()

	IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
		target_link_libraries(${project_name} rt)
	ENDIF()
  
	IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
  		set_target_properties(${project_name} PROPERTIES LINK_FLAGS "/MANIFESTUAC  /level='requireAdministrator'")
	ENDIF()
endmacro()

#配置依赖qt4动态库，供generate_qt5_project调用
macro(generate_qt4_project_internal project_name)
	message(STATUS "use qt4...")
	add_definitions(-DQT_CORE_LIB)
	add_ui_group()
	
	set(CMAKE_INCLUDE_CURRENT_DIR ON)
	set(CMAKE_AUTOMOC ON)
	set(CMAKE_AUTOUIC ON)
	
	
	foreach(qt_library ${QT_LIBRARY_LIST})
	   IF(${qt_library} MATCHES "Widgets")
	   ELSE(${qt_library} MATCHES "Widgets")
			include_directories($ENV{QT4_DIR}/include)
			include_directories($ENV{QT4_DIR}/include/Qt${qt_library})
			include_directories($ENV{QT4_DIR}/include/Qt${qt_library}/private)
		ENDIF()
	endforeach()
	  
	link_directories($ENV{QT4_DIR}/lib)
	  
	configure_generate_project(${project_name})
	
	FIND_PACKAGE(Qt4 REQUIRED)
	  
	IF(QRC_SOURCE_FILES)
	    qt4_add_resources(SOURCE_FILES ${QRC_SOURCE_FILES})
	ENDIF()
	  
	IF(UI_FILES)
		QT4_WRAP_UI(UI_FILES ${UI_FILES})
	ENDIF()
	  
	add_library(${project_name} SHARED ${SOURCE_FILES} ${HEADER_FILES} ${QRC_SOURCE_FILES} ${UI_FILES})
	
	foreach(qt_library ${QT_LIBRARY_LIST})
		IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
			IF(${qt_library} MATCHES "Widgets")
			ELSE(${qt_library} MATCHES "Widgets")
				IF(BUILD_CONFIG MATCHES Debug)
					target_link_libraries(${project_name} Qt${qt_library}d4)
				ELSEIF(BUILD_CONFIG MATCHES Release)
					target_link_libraries(${project_name} Qt${qt_library}4)
				ENDIF()
			ENDIF()
		ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Linux")
			IF(${qt_library} MATCHES "Widgets")
			ELSE(${qt_library} MATCHES "Widgets")
				IF(BUILD_CONFIG MATCHES Debug)
					target_link_libraries(${project_name} Qt${qt_library}d)
				ELSEIF(BUILD_CONFIG MATCHES Release)
					target_link_libraries(${project_name} Qt${qt_library})
				ENDIF()
			ENDIF()
		ENDIF()
	endforeach()
	
	IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
		foreach(library_arg ${THIRD_LIBRARY_LIST})
			IF(library_arg MATCHES Qtnribbon)
				IF(BUILD_CONFIG MATCHES Debug)
					target_link_libraries(${project_name} qtnribbond3)
				ELSEIF(BUILD_CONFIG MATCHES Release)
					target_link_libraries(${project_name} qtnribbon3)
				ENDIF()
			ENDIF()
			IF(library_arg MATCHES pugixml)
				IF(BUILD_CONFIG MATCHES Debug)
					target_link_libraries(${project_name} pugixmld)
                ELSEIF(BUILD_CONFIG MATCHES Release)
					target_link_libraries(${project_name} pugixml)
				ENDIF()
            ENDIF()
			IF(library_arg MATCHES qwt)
				IF(BUILD_CONFIG MATCHES Debug)
					target_link_libraries(${project_name} qwtd)
				ELSEIF(BUILD_CONFIG MATCHES Release)
					target_link_libraries(${project_name} qwt)
				ENDIF()
			ENDIF()
			IF(library_arg MATCHES lua53)
				IF(CRT_VERSION_NAME MATCHES "vc140")
				target_link_libraries(${project_name} lua53)
				ENDIF()
			ENDIF()
	    endforeach()
	ENDIF()
	
	IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
		IF(CMAKE_BUILD_TYPE MATCHES "DEBUG")
			target_link_libraries(${project_name} 
			qtnribbon soci_core iconv sqlite3 boost_thread boost_system boost_filesystem 
			boost_date_time boost_program_options boost_regex
			boost_atomic boost_chrono tbb_debug tbbmalloc_debug tbbmalloc_proxy_debug)
		ELSEIF(CMAKE_BUILD_TYPE MATCHES "RELEASE")
			target_link_libraries(${project_name} 
			qtnribbon soci_core iconv sqlite3 boost_thread boost_system boost_filesystem 
			boost_date_time boost_program_options boost_regex
			boost_atomic boost_chrono tbb tbbmalloc tbbmalloc_proxy)
		ENDIF()
	
	ENDIF()  
endmacro()

#配置依赖qt5动态库，供generate_qt5_project调用
macro(generate_qt5_project_internal project_name)


	add_ui_group()

	set(CMAKE_INCLUDE_CURRENT_DIR ON)
	set(CMAKE_AUTOMOC ON)
	set(CMAKE_AUTOUIC ON)
	set(CMAKE_AUTORCC ON)


	foreach(qt_library ${QT_LIBRARY_LIST})

		find_package(Qt5${qt_library} REQUIRED)
		include_directories($ENV{QT5_DIR}/include/Qt${qt_library}/${Qt5${qt_library}_VERSION_STRING})
		include_directories($ENV{QT5_DIR}/include/Qt${qt_library}/${Qt5${qt_library}_VERSION_STRING}/Qt${qt_library})
		include_directories($ENV{QT5_DIR}/include/Qt${qt_library}/${Qt5${qt_library}_VERSION_STRING}/Qt${qt_library}/private)
  
	endforeach()

	IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
		include_directories($ENV{QT5_DIR}/../Src/qtbase/include/QtANGLE)
	ENDIF()

	configure_generate_project(${project_name})

	IF(QRC_SOURCE_FILES)
		qt5_add_resources(SOURCE_FILES ${QRC_SOURCE_FILES})
	ENDIF()
  
	IF(UI_FILES)
		qt5_wrap_ui(UI_FILES ${UI_FILES})
	ENDIF()

	add_library(${project_name} SHARED ${SOURCE_FILES} ${HEADER_FILES} ${QRC_SOURCE_FILES} ${UI_FILES})

	foreach(qt_library ${QT_LIBRARY_LIST})
		target_link_libraries(${project_name} Qt5::${qt_library})
	endforeach()

	IF(CMAKE_BUILD_TYPE MATCHES "DEBUG")
		IF(CRT_VERSION_NAME MATCHES "vc140")
			set_target_properties(${project_name} PROPERTIES LINK_FLAGS_DEBUG "/DEBUG:FULL")
		ENDIF()
	ENDIF()

	IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
		foreach(library_arg ${THIRD_LIBRARY_LIST})
			IF(library_arg MATCHES Qtnribbon)
				IF(BUILD_CONFIG MATCHES Debug)
					target_link_libraries(${project_name} qtnribbond3)
				ELSEIF(BUILD_CONFIG MATCHES Release)
					target_link_libraries(${project_name} qtnribbon3)
				ENDIF()
			ENDIF()
			IF(library_arg MATCHES pugixml)
				IF(BUILD_CONFIG MATCHES Debug)
					target_link_libraries(${project_name} pugixmld)
                ELSEIF(BUILD_CONFIG MATCHES Release)
					target_link_libraries(${project_name} pugixml)
				ENDIF()
            ENDIF()
			IF(library_arg MATCHES qwt)
			IF(BUILD_CONFIG MATCHES Debug)
				target_link_libraries(${project_name} qwtd)
			ELSEIF(BUILD_CONFIG MATCHES Release)
				target_link_libraries(${project_name} qwt)
			ENDIF()
			ENDIF()
			IF(library_arg MATCHES gtest)
			IF(CRT_VERSION_NAME MATCHES "vc140")
				IF(BUILD_CONFIG MATCHES Debug)
					target_link_libraries(${project_name} gtestd)
				ELSEIF(BUILD_CONFIG MATCHES Release)
					target_link_libraries(${project_name} gtest)
				ENDIF()
			ENDIF()
			ENDIF()
			IF(library_arg MATCHES lua53)
			IF(CRT_VERSION_NAME MATCHES "vc140")
				target_link_libraries(${project_name} lua53)
			ENDIF()
			ENDIF()
		endforeach()
	ENDIF()

	IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
		IF(CMAKE_BUILD_TYPE MATCHES "DEBUG")
			target_link_libraries(${project_name} 
				qtnribbon soci_core iconv sqlite3 boost_thread boost_system boost_filesystem 
				boost_date_time boost_program_options boost_regex
				boost_atomic boost_chrono tbb_debug tbbmalloc_debug tbbmalloc_proxy_debug gtestd)
		ELSEIF(CMAKE_BUILD_TYPE MATCHES "RELEASE")
			target_link_libraries(${project_name} 
				qtnribbon soci_core iconv sqlite3 boost_thread boost_system boost_filesystem 
				boost_date_time boost_program_options boost_regex
				boost_atomic boost_chrono tbb tbbmalloc tbbmalloc_proxy gtest)
		ENDIF()
	ENDIF()
endmacro()

#========================================外部直接调用函数
#判断qt版本，调用生成动态库
macro(generate_qt5_project project_name)

	IF(DEFINED ENV{USE_QT4})
		add_definitions(-DQT_CORE_LIB)
		generate_qt4_project_internal(${project_name})
	ELSE(DEFINED ENV{USE_QT4})
		generate_qt5_project_internal(${project_name})
	ENDIF()
   
	configure_ElSE_LIBRARY_LIST(${project_name})

	INSTALL(FILES ${HEADER_FILES} DESTINATION ${CRT_VERSION_NAME}/${PLATFORM}/include/${project_name})

	IF(CMAKE_GENERATOR MATCHES "Visual Studio")
		IF(BUILD_CONFIG MATCHES Debug)
			INSTALL(PROGRAMS "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG}/${project_name}${CMAKE_DEBUG_POSTFIX}.pdb"
			DESTINATION ${CRT_VERSION_NAME}/${PLATFORM}/pdb)
		ENDIF()
	ENDIF()

	INSTALL(TARGETS ${project_name}
		RUNTIME DESTINATION ${CRT_VERSION_NAME}/${PLATFORM}
		LIBRARY DESTINATION ${CRT_VERSION_NAME}/${PLATFORM}
		ARCHIVE DESTINATION ${CRT_VERSION_NAME}/${PLATFORM}/lib/${PLATFORM})
endmacro()

#========================================外部直接调用函数
#生成qt可执行文件
macro(generate_qt5_project_exe project_name)

    add_ui_group()

    set(CMAKE_INCLUDE_CURRENT_DIR ON)
    set(CMAKE_AUTOMOC ON)
    set(CMAKE_AUTOUIC ON)

    IF(NOT DEFINED ENV{USE_QT4})
        set(CMAKE_AUTORCC ON)
    ENDIF()

    foreach(qt_library ${QT_LIBRARY_LIST})
        IF(DEFINED ENV{USE_QT4})
            add_definitions(-DQT_CORE_LIB)
            IF ( ${qt_library} MATCHES "Widgets")
            ELSE(${qt_library} MATCHES "Widgets")
                include_directories($ENV{QT4_DIR}/include)
                include_directories($ENV{QT4_DIR}/include/Qt${qt_library})
                include_directories($ENV{QT4_DIR}/include/Qt${qt_library}/private)
            ENDIF()
        ELSE(DEFINED ENV{USE_QT4})
            find_package(Qt5${qt_library} REQUIRED)
            include_directories($ENV{QT5_DIR}/include/Qt${qt_library}/${Qt5${qt_library}_VERSION_STRING})
            include_directories($ENV{QT5_DIR}/include/Qt${qt_library}/${Qt5${qt_library}_VERSION_STRING}/Qt${qt_library})
            include_directories($ENV{QT5_DIR}/include/Qt${qt_library}/${Qt5${qt_library}_VERSION_STRING}/Qt${qt_library}/private)
        ENDIF()

    endforeach()

    IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
        include_directories($ENV{QT5_DIR}/../Src/qtbase/include/QtANGLE)
    ENDIF()

    configure_generate_project(${project_name})

    IF(DEFINED ENV{USE_QT4})
        link_directories($ENV{QT4_DIR}/lib)
        FIND_PACKAGE(Qt4 REQUIRED)

        IF(QRC_SOURCE_FILES)
            qt4_add_resources(SOURCE_FILES ${QRC_SOURCE_FILES})
        ENDIF()

        IF(UI_FILES)
            QT4_WRAP_UI(UI_FILES ${UI_FILES})
        ENDIF()
    ELSE(DEFINED ENV{USE_QT4})
        IF(QRC_SOURCE_FILES)
            qt5_add_resources(SOURCE_FILES ${QRC_SOURCE_FILES})
        ENDIF()

        IF(UI_FILES)
            qt5_wrap_ui(UI_FILES ${UI_FILES})
        ENDIF()
    ENDIF()

    add_executable(${project_name} ${SOURCE_FILES} ${HEADER_FILES} ${QRC_SOURCE_FILES} ${UI_FILES})

	configure_ElSE_LIBRARY_LIST(${project_name})

    IF(DEFINED ENV{USE_QT4})
        foreach(qt_library ${QT_LIBRARY_LIST})
            IF (CMAKE_SYSTEM_NAME MATCHES "Windows")
                IF(${qt_library} MATCHES "Widgets")
                ELSE(${qt_library} MATCHES "Widgets")
                    IF(BUILD_CONFIG MATCHES Debug)
                        target_link_libraries(${project_name} Qt${qt_library}d4)
                    ELSEIF(BUILD_CONFIG MATCHES Release)
                        target_link_libraries(${project_name} Qt${qt_library}4)
                    ENDIF()
                ENDIF()
            ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Linux")
                IF(${qt_library} MATCHES "Widgets")
                ELSE(${qt_library} MATCHES "Widgets")
                    IF(BUILD_CONFIG MATCHES Debug)
                        target_link_libraries(${project_name} Qt${qt_library}d)
                    ELSEIF(BUILD_CONFIG MATCHES Release)
                        target_link_libraries(${project_name} Qt${qt_library})
                    ENDIF()
                ENDIF()
            ENDIF()
        endforeach()
    ELSE(DEFINED ENV{USE_QT4})
        foreach(qt_library ${QT_LIBRARY_LIST})
            target_link_libraries(${project_name} Qt5::${qt_library})
        endforeach()
    ENDIF()

    IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
        set_target_properties(${project_name} PROPERTIES LINK_FLAGS "/SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup /level='requireAdministrator'")
        IF(CMAKE_BUILD_TYPE MATCHES "DEBUG")
            IF(CRT_VERSION_NAME MATCHES "vc140")
                set_target_properties(${project_name} PROPERTIES LINK_FLAGS_DEBUG "/DEBUG:FULL")
            ENDIF()
        ENDIF()
    ENDIF()

    #foreach(library_arg ${THIRD_LIBRARY_LIST})
        IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
            foreach(library_arg ${THIRD_LIBRARY_LIST})
                IF(library_arg MATCHES Qtnribbon)
                    IF(BUILD_CONFIG MATCHES Debug)
                        target_link_libraries(${project_name} qtnribbond3)
                    ELSEIF(BUILD_CONFIG MATCHES Release)
                        target_link_libraries(${project_name} qtnribbon3)
                    ENDIF()
                ENDIF()
                IF(library_arg MATCHES qwt)
                    IF(BUILD_CONFIG MATCHES Debug)
                        target_link_libraries(${project_name} qwtd)
                    ELSEIF(BUILD_CONFIG MATCHES Release)
                        target_link_libraries(${project_name} qwt)
                    ENDIF()
                ENDIF()
				IF(library_arg MATCHES pugixml)
                    IF(BUILD_CONFIG MATCHES Debug)
                        target_link_libraries(${project_name} pugixmld)
                    ELSEIF(BUILD_CONFIG MATCHES Release)
                        target_link_libraries(${project_name} pugixml)
                    ENDIF()
                ENDIF()
                IF(library_arg MATCHES gtest)
                    IF(CRT_VERSION_NAME MATCHES "vc140")
                        IF(BUILD_CONFIG MATCHES Debug)
                            target_link_libraries(${project_name} gtestd)
                        ELSEIF(BUILD_CONFIG MATCHES Release)
                            target_link_libraries(${project_name} gtest)
                        ENDIF()
                    ENDIF()
                ENDIF()
                IF(library_arg MATCHES lua53)
                    IF(CRT_VERSION_NAME MATCHES "vc140")
                        target_link_libraries(${project_name} lua53)
                    ENDIF()
                ENDIF()
            endforeach()
        ENDIF()
    #endforeach()

    IF(CMAKE_BUILD_TYPE MATCHES "DEBUG")
        set_target_properties(${project_name} PROPERTIES DEBUG_POSTFIX "d")
    ENDIF()

    IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
        IF(CMAKE_BUILD_TYPE MATCHES "DEBUG")
            target_link_libraries(${project_name}
                    qtnribbon soci_core iconv sqlite3 boost_thread boost_system boost_filesystem
                    boost_date_time boost_program_options boost_regex
                    boost_atomic boost_chrono tbb_debug tbbmalloc_debug tbbmalloc_proxy_debug gtestd)
        ELSEIF(CMAKE_BUILD_TYPE MATCHES "RELEASE")
            target_link_libraries(${project_name}
                    qtnribbon soci_core iconv sqlite3 boost_thread boost_system boost_filesystem
                    boost_date_time boost_program_options boost_regex
                    boost_atomic boost_chrono tbb tbbmalloc tbbmalloc_proxy gtest)
        ENDIF()
    ENDIF()

    INSTALL(FILES ${HEADER_FILES} DESTINATION ${CRT_VERSION_NAME}/${PLATFORM}/include/${project_name})

    IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
        IF(BUILD_CONFIG MATCHES Debug)
            INSTALL(PROGRAMS "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG}/${project_name}d.pdb"
                    DESTINATION ${CRT_VERSION_NAME}/${PLATFORM}/pdb)
        ENDIF()
    ENDIF()

    INSTALL(TARGETS ${project_name}
            RUNTIME DESTINATION ${CRT_VERSION_NAME}/${PLATFORM}
            LIBRARY DESTINATION ${CRT_VERSION_NAME}/${PLATFORM}
            ARCHIVE DESTINATION ${CRT_VERSION_NAME}/${PLATFORM}/lib/${PLATFORM})
endmacro()