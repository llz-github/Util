#ifndef TimeUtil_H
#define TimeUtil_H

#include "Util.h"
#include "Util_global.h"

#define UTIL_INSTANCE_GetCurrentTimeString()	TimeUtil::instance()->GetCurrentTimeString()
#define UTIL_INSTANCE_TimingStarts()	TimeUtil::instance()->TimingStarts()
#define UTIL_INSTANCE_TimingEnds()	TimeUtil::instance()->TimingEnds()


struct TimeUtilPrivate;

class UTIL_EXPORT TimeUtil
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	单例. </summary>
	///
	/// <remarks>	llz, 2022/3/24. </remarks>
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////

	static TimeUtil* instance();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	获取当前系统时间，返回 %d-%d-%d %d-%d-%d.%d 格式字符串. </summary>
	///
	/// <remarks>	llz, 2022/3/24. </remarks>
	///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	std::string GetCurrentTimeString();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	开始计时. </summary>
	///
	/// <remarks>	llz, 2022/3/24. </remarks>
	///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void TimingStarts();
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	计时结束. </summary>
	///
	/// <remarks>	llz, 2022/3/24. </remarks>
	/// <result >	开始到结束的持续时间ms. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	double TimingEnds();

private:
	static TimeUtil *m_instance;
	
	static TimeUtilPrivate *_p;
};
#endif // TimeUtil_H
